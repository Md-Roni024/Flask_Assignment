openapi: 3.0.0
info:
  title: User Management API
  description: An API for managing users, including registration, sign-in, password reset, and user management.
  version: 1.0.0
paths:
  /:
    get:
      summary: Home Endpoint
      responses:
        '200':
          description: Welcome message
          content:
            text/plain:
              schema:
                type: string
                example: "Welcome to the API! Use /register to create an account, /signin to log in, /reset-password to reset your password, and /users to manage users."

  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                role:
                  type: string
                  default: User
                active:
                  type: boolean
                  default: true
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User registered successfully!"
                  user:
                    type: object
                    # Define user properties here
                  access_token:
                    type: string
        '400':
          description: Username or Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Username or Email already exists"

  /signin:
    post:
      summary: Sign in an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Login successful"
        '401':
          description: Username or Password does not match
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Username or Password does not match"

  /reset-password:
    put:
      summary: Reset password for a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                new_password:
                  type: string
                current_password:
                  type: string
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Password reset successfully!"
        '401':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Current password is incorrect"
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not found"

  /users:
    get:
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  # Define user properties here
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Unauthorized access"

  /users/{user_id}:
    get:
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                # Define user properties here
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not found"
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Unauthorized access"

    put:
      summary: Update a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                active:
                  type: boolean
                role:
                  type: string
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User updated successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not found"
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Unauthorized access"

    delete:
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User deleted successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "User not found"
        '403':
          description: Unauthorized access
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "Unauthorized access"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
