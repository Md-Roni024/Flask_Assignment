from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy import Enum
from urllib.parse import quote
import re
from flask_restful import Api, Resource
from flask_marshmallow import Marshmallow
from flask_migrate import Migrate

app = Flask(__name__)
api = Api(app)
ma = Marshmallow(app)

# URL encode your password if it contains special characters
password = 'p@stgress'
encoded_password = quote(password)

app.config['SQLALCHEMY_DATABASE_URI'] = f'postgresql://postgres:{encoded_password}@localhost:5433/hotel_database'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = '173120'
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)

db = SQLAlchemy(app)
jwt = JWTManager(app)
migrate = Migrate(app, db)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), unique=True, nullable=False)  # Increased length
    first_name = db.Column(db.String(255), nullable=False)  # Increased length
    last_name = db.Column(db.String(255), nullable=False)  # Increased length
    password_hash = db.Column(db.String(255), nullable=False)  # Ensuring enough length for hashed passwords
    email = db.Column(db.String(255), unique=True, nullable=False)  # Increased length
    role = db.Column(Enum('Admin', 'User', name='user_roles'), default='User')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    active = db.Column(db.Boolean, default=True)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

class UserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User
        exclude = ('password_hash',)

user_schema = UserSchema()
users_schema = UserSchema(many=True)

@app.route('/')
def home():
    return "Welcome to the API! Use /register to create an account, /signin to log in, /reset-password to reset your password, and /users to manage users."


#ok---register
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    email = data.get('email')
    role = data.get('role', 'User')
    active = data.get('active', True)

    if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
        return jsonify({"msg": "Username or Email already exists"}), 400

    user = User(username=username, first_name=first_name, last_name=last_name, 
                email=email, role=role, active=active)
    user.set_password(password)
    db.session.add(user)
    db.session.commit()

    access_token = create_access_token(identity=user.username)
    user_data = user_schema.dump(user)

    return jsonify({"msg": "User registered successfully!", "user": user_data, "access_token": access_token}), 201


#ok---signin
@app.route('/signin', methods=['POST'])
def signin():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()
    if user and user.check_password(password):
        return jsonify({"msg": "Login successful"}), 200
    return jsonify({"msg": "Username or Password does not match"}), 401




#ok-reset password
@app.route('/reset-password', methods=['PUT'])
def reset_password():
    data = request.get_json()
    username = data.get('username')
    new_password = data.get('new_password')

    user = User.query.filter_by(username=username).first()
    if user:
        user.set_password(new_password)
        db.session.commit()
        return jsonify({"msg": "Password reset successfully!"}), 200
    return jsonify({"msg": "User not found"}), 404


@app.route('/users', methods=['GET'])
@jwt_required()
def get_users():
    current_user = User.query.filter_by(username=get_jwt_identity()).first()
    if current_user.role != 'Admin':
        return jsonify({"msg": "Unauthorized access"}), 403

    users = User.query.all()
    return jsonify(users_schema.dump(users))

@app.route('/users/<int:user_id>', methods=['GET'])
@jwt_required()
def get_user(user_id):
    current_user = User.query.filter_by(username=get_jwt_identity()).first()
    if current_user.role != 'Admin':
        return jsonify({"msg": "Unauthorized access"}), 403

    user = User.query.get(user_id)
    if user:
        return jsonify(user_schema.dump(user))
    return jsonify({"msg": "User not found"}), 404

@app.route('/users/<int:user_id>', methods=['PUT'])
@jwt_required()
def update_user(user_id):
    current_user = User.query.filter_by(username=get_jwt_identity()).first()
    if current_user.role != 'Admin' and current_user.id != user_id:
        return jsonify({"msg": "Unauthorized access"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"msg": "User not found"}), 404

    data = request.get_json()
    user.first_name = data.get('first_name', user.first_name)
    user.last_name = data.get('last_name', user.last_name)
    user.email = data.get('email', user.email)
    user.active = data.get('active', user.active)

    if current_user.role == 'Admin':
        user.role = data.get('role', user.role)

    db.session.commit()
    return jsonify({"msg": "User updated successfully"}), 200

@app.route('/users/<int:user_id>', methods=['DELETE'])
@jwt_required()
def delete_user(user_id):
    current_user = User.query.filter_by(username=get_jwt_identity()).first()
    if current_user.role != 'Admin':
        return jsonify({"msg": "Unauthorized access"}), 403

    user = User.query.get(user_id)
    if not user:
        return jsonify({"msg": "User not found"}), 404

    db.session.delete(user)
    db.session.commit()
    return jsonify({"msg": "User deleted successfully"}), 200

if __name__ == '__main__':
    app.run(debug=True)
